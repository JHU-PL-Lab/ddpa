(**
   This module gives an implementation of the Plume analysis.  It is parametric
   in the choice of context stack.
*)

open Batteries;;
open Jhupllib;;

open Odefa_abstract_ast;;
open Odefa_ast;;

open Abstract_ast;;
open Abstract_ast_utils;;
open Ast;;
open Plume_analysis_logging;;
open Plume_context_model;;
open Plume_graph;;
open Plume_utils;;
open Nondeterminism;;
open Pp_utils;;

let logger = Logger_utils.make_logger "Plume_analysis";;
let lazy_logger = Logger_utils.make_lazy_logger "Plume_analysis";;

module type Analysis_sig =
sig
  (** The type of the Plume analysis generated by the module. *)
  type plume_analysis

  (** The context stack module for this analysis. *)
  module C : Context_model;;

  (** The CFG type for this analysis. *)
  module G : Graph_sig with module C = C;;

  (** The initial, unclosed analysis derived from an expression. *)
  val create_initial_analysis :
    ?plume_logging_config:(plume_analysis_logging_config option) ->
    expr -> plume_analysis

  (** Pretty-prints a Plume structure. *)
  val pp_plume_analysis : plume_analysis pretty_printer
  val show_plume_analysis : plume_analysis -> string

  (** Get size of Plume and underlying PDS. *)
  val get_size : plume_analysis -> int * int * int * int * int

  (** Performs a series of closure steps on an analysis.  This is not guaranteed
      to complete closure; however, it will make progress as long as the
      argument is not fully closed. *)
  val perform_closure_steps : plume_analysis -> plume_analysis

  (** Determines if an analysis is fully closed. *)
  val is_fully_closed : plume_analysis -> bool

  (** Fully closes an analysis. *)
  val perform_full_closure : plume_analysis -> plume_analysis

  (** Determines the values at a given position of the provided variable in the
      given analysis.  This is an approximation -- false positives may arise --
      but it is guaranteed to be conservative if the analysis is fully closed.
      The returned analysis contains a cache structure to accelerate answering
      of this question in the future. *)
  val values_of_variable :
    abstract_var -> annotated_clause -> plume_analysis ->
    Abs_filtered_value_set.t * plume_analysis

  val contextual_values_of_variable :
    abstract_var -> annotated_clause -> C.t -> plume_analysis ->
    Abs_filtered_value_set.t * plume_analysis
end;;

(**
   A functor which constructs a Plume analysis module.
*)
module Make(C : Context_model)
  : Analysis_sig with module C = C =
struct
  module C = C;;
  module G = Graph_impl(C);;

  open G;;
  open G.E;;

  module Node =
  struct
    type t = node
    let compare = compare_node
    let pp = pp_node
    let to_yojson = node_to_yojson
  end;;

  (* module Lookup_pair =
  struct
    type t = abstract_var * E.C.t [@@deriving eq, ord]
  end;;

  module Lookup_pair_map =
  struct
    module Impl = Map.Make(Lookup_pair);;
    include Impl;;
  end;; *)

  (* Set for nodes - used in plume_analysis.ml *)
  module Node_set =
  struct
    module Impl = Set.Make(Node);;
    include Impl;;
    include Pp_utils.Set_pp(Impl)(Node);;
    include Yojson_utils.Set_to_yojson(Impl)(Node);;
  end;;

  module Structure_types = Plume_pds_structure_types.Make(G);;
  module Dynamic_pop_types =
    Plume_pds_dynamic_pop_types.Make(G)(Structure_types)
  ;;
  module Dynamic_pop_handler =
    Plume_pds_dynamic_pop_handler.Make(G)(Structure_types)(Dynamic_pop_types)
  ;;

  module Plume_pds_reachability_basis =
  struct
    module State = Structure_types.Pds_state;;
    module Stack_element = Structure_types.Pds_continuation;;
  end

  module Plume_pds_reachability =
    Pds_reachability.Make
      (Plume_pds_reachability_basis)
      (Dynamic_pop_handler)
      (Pds_reachability_work_collection_templates.Work_stack)
  ;;

  open Plume_pds_reachability.Stack_action.T;;
  open Plume_pds_reachability.Terminus.T;;

  module Edge_functions =
    Plume_pds_edge_functions.Make
      (G)
      (Structure_types)
      (Dynamic_pop_types)
      (Plume_pds_reachability_basis)
      (Plume_pds_reachability)
  ;;

  type plume_analysis_logging_data =
    { plume_logging_config : plume_analysis_logging_config
    ; plume_closure_steps : int
    }
  [@@deriving show]
  ;;
  let _ = show_plume_analysis_logging_data;;

  type plume_analysis =
    { plume_graph : G.t
    ; pds_reachability : Plume_pds_reachability.analysis
    ; plume_active_nodes : Node_set.t
    (** The active nodes in the Plume graph.  This set is maintained
            incrementally as edges are added. *)
    ; plume_active_non_immediate_nodes : Node_set.t
    (** A subset of [plume_active_nodes] which only contains the
        non-immediate nodes.  This is useful during closure. *)
    ; plume_graph_fully_closed : bool
    (* ; plume_edges_waitlist : edge Batteries.Deque.dq *)
    (** A list of edges that need to be added to the CFG **)
    ; plume_logging_data : plume_analysis_logging_data option
    (** Data associated with logging, if appropriate. *)
    }
  [@@deriving show]
  ;;

  let dump_yojson analysis =
    `Assoc
      [ ( "plume_graph"
        , G.to_yojson analysis.plume_graph
        )
      ; ( "plume_active_nodes"
        , Node_set.to_yojson analysis.plume_active_nodes
        )
      ; ("plume_active_non_immediate_nodes"
        , Node_set.to_yojson
            analysis.plume_active_non_immediate_nodes
        )
      (* ; ("plume_edges_waitlist"
        , Yojson_utils.list_to_yojson (to_yojson) (Deque.to_list analysis.plume_edges_waitlist)
        ) *)
      ]
  ;;

  (** Logs a given PDS reachability graph.  This only occurs if the logging
      level of the analysis is at least as high as the one provided in this
      call.  The graph to be logged defaults to the analysis but can be
      overridden (e.g. in the logger given to that analysis). *)
  let log_pdr level plume_logging_data_opt reachability =
    match plume_logging_data_opt with
    | None -> ()
    | Some data ->
      if compare_plume_logging_level
          data.plume_logging_config.plume_pdr_logging_level
          level >= 0
      then
        begin
          let json =
            `Assoc
              [ ( "element_type"
                , `String "pds_reachability_graph"
                )
              ; ( "work_count"
                , `Int (Plume_pds_reachability.get_work_count reachability)
                )
              ; ( "graph"
                , Plume_pds_reachability.dump_yojson reachability
                )
              ]
          in
          data.plume_logging_config.plume_json_logger json
        end
  ;;

  (** As log_pdr, but logs a delta of the reachability graph. *)
  let log_pdr_delta
      level plume_logging_data_opt old_reachability new_reachability =
    match plume_logging_data_opt with
    | None -> ()
    | Some data ->
      if compare_plume_logging_level
          data.plume_logging_config.plume_pdr_logging_level
          level >= 0
      then
        begin
          let json =
            `Assoc
              [ ( "element_type"
                , `String "pds_reachability_graph_delta"
                )
              ; ( "work_count"
                , `Int (Plume_pds_reachability.get_work_count new_reachability)
                )
              ; ( "graph"
                , Plume_pds_reachability.dump_yojson_delta
                    old_reachability new_reachability
                )
              ]
          in
          data.plume_logging_config.plume_json_logger json
        end
  ;;

  (** Logs a given Plume control flow graph.  This only occurs if the logging
      level of the analysis is at least as high as the one provided in this
      call. *)
  let log_cfg level analysis =
    match analysis.plume_logging_data with
    | None -> ()
    | Some data ->
      if compare_plume_logging_level
          data.plume_logging_config.plume_cfg_logging_level
          level >= 0
      then
        begin
          let json =
            `Assoc
              [ ( "element_type"
                , `String "plume_graph"
                )
              ; ( "work_count"
                , `Int (Plume_pds_reachability.get_work_count
                          analysis.pds_reachability)
                )
              ; ( "graph"
                , dump_yojson analysis
                )
              ]
          in
          data.plume_logging_config.plume_json_logger json
        end
  ;;

  let get_size analysis =
    let pds_node_count, pds_edge_count =
      Plume_pds_reachability.get_size analysis.pds_reachability
    in
    let filter_inferrable_nodes nodes =
      nodes
      |> Node_set.filter (
        fun node ->
          let Node(acl, _) = node in
          match acl with
          | Enter_clause _
          | Exit_clause _ -> false
          | _ -> true
      )
    in
    Node_set.cardinal (filter_inferrable_nodes analysis.plume_active_nodes),
    Node_set.cardinal (filter_inferrable_nodes analysis.plume_active_non_immediate_nodes),
    analysis.plume_graph
    |> edges_of
    |> List.of_enum
    |> List.length,
    pds_node_count,
    pds_edge_count
  ;;

  (*
     Adds a set of edges to the Plume graph.  This implicitly adds the vertices
     involved in those edges.  Note that this does not affect the end-of-block
     map.
  *)
  (* let add_one_edge edge_in analysis =
    if has_edge edge_in analysis.plume_graph then analysis else
      (* Add edge to CFG *)
      let plume_graph' =
        add_edge edge_in analysis.plume_graph
      in
      (* ***
         Then, update the PDS reachability analysis with the new edge
         information.
      *)
      let add_edge_for_reachability edge reachability =
        reachability
        |> Plume_pds_reachability.add_edge_function
          (Edge_functions.create_edge_function edge)
        |> Plume_pds_reachability.add_untargeted_dynamic_pop_action_function
          (Edge_functions.create_untargeted_dynamic_pop_action_function edge)
      in
      let pds_reachability' =
        add_edge_for_reachability edge_in analysis.pds_reachability
      in
      (* ***
         Now, perform closure over the active node set.  This function uses a
         list of enumerations of nodes to explore.  This reduces the cost of
         managing the work queue.
      *)
      let rec find_new_active_nodes from_nodes_enums results_so_far =
        match from_nodes_enums with
        | [] -> results_so_far
        | from_nodes_enum::from_nodes_enums' ->
          if Enum.is_empty from_nodes_enum
          then find_new_active_nodes from_nodes_enums' results_so_far
          else
            let from_node = Enum.get_exn from_nodes_enum in
            if Node_set.mem from_node analysis.plume_active_nodes ||
               Node_set.mem from_node results_so_far
            then find_new_active_nodes from_nodes_enums results_so_far
            else
              let results_so_far' =
                Node_set.add from_node results_so_far
              in
              let from_here = plume_graph' |> succs from_node in
              find_new_active_nodes (from_here::from_nodes_enums) results_so_far'
      in
      let (plume_active_nodes',plume_active_non_immediate_nodes') =
        let new_active_root_node_opt =
          let (Edge(node_left,node_right)) = edge_in in
          if Node_set.mem node_left analysis.plume_active_nodes
          then
            if not @@ Node_set.mem node_left analysis.plume_active_nodes
            then Some node_right
            else None
          else None
        in
        let new_active_nodes =
          match new_active_root_node_opt with
          | None -> Node_set.empty
          | Some node ->
            find_new_active_nodes [(Enum.singleton node)] Node_set.empty
        in
        let is_node_immediate node =
          let G.E.Node(acl, _) = node in
          is_annotated_clause_immediate acl
        in
        ( Node_set.union analysis.plume_active_nodes
            new_active_nodes
        (* Here we are only returning the new non-immediate active nodes,
           because all of the previous ones should have been handled by the
           last CFG closure step at this point.
        *)
        , ( new_active_nodes |> Node_set.filter
              (not % is_node_immediate) )
        )
      in
      { plume_graph = plume_graph'
      ; pds_reachability = pds_reachability'
      ; plume_active_nodes = plume_active_nodes'
      ; plume_active_non_immediate_nodes = plume_active_non_immediate_nodes'
      ; plume_edges_waitlist = analysis.plume_edges_waitlist
      ; plume_logging_data = analysis.plume_logging_data
      }
  ;; *)

  (* NOTE: CFG closure step
     - Add edge to CFG *Done
     - Update PDS (not closing it) *Done
     - Find new active non-immediate nodes *Done
     - React to new active things
     - Compute and react to PDS closure until PDS closed, all edges produced
       will be added to the waitlist
  *)

  (* let cfg_closure_step analysis =
    let module Wiring = Graph_construct(G) in
    let open Wiring in
    if (Deque.is_empty analysis.plume_edges_waitlist) then analysis
    else
      (* Adding one edge to the CFG and update the PDS accordingly *)
      let q_front_option = Deque.front analysis.plume_edges_waitlist in
      let new_analysis =
        match q_front_option with
        | Some (edge_to_add, waitlist') ->
          let pre_analysis =
            { plume_graph = analysis.plume_graph
            ; pds_reachability =  analysis.pds_reachability
            ; plume_active_nodes = analysis.plume_active_nodes
            ; plume_active_non_immediate_nodes =
                analysis.plume_active_non_immediate_nodes
            ; plume_edges_waitlist = waitlist'
            ; plume_logging_data = analysis.plume_logging_data
            }
          in
          add_one_edge edge_to_add pre_analysis
        | None -> raise @@
          Failure "analysis.plume_edges_waitlist should not be empty here!"
          (* Act in response to the newly discovered active non-immediate nodes *)
      in
      let new_ni_nodes = new_analysis.plume_active_non_immediate_nodes in
      let node_process_fun node arg_map fun_map =
        let Node(acl, ctx) = node in
        match acl with
        | Unannotated_clause
            (Abs_clause
               (clause_name,
                Abs_appl_body(appl_fun,appl_arg)) as cl) ->
          let fun_to_call = fun old_fun_map ->
            let new_fun =
              fun fun_val -> fun graph ->
                wire_fun node fun_val appl_arg clause_name graph
            in
            let new_fun_map =
              if (Lookup_pair_map.mem (appl_fun, ctx) old_fun_map) then
                let old_entry =
                  Lookup_pair_map.find (appl_fun, ctx) old_fun_map in
                let new_entry = (new_fun) :: old_entry in
                Lookup_pair_map.update
                  (appl_fun, ctx) (appl_fun, ctx) new_entry old_fun_map
              else
                Lookup_pair_map.add (appl_fun, ctx) [new_fun] old_fun_map
            in
            (* NOTE: actual work happens here *)
            if (Lookup_pair_map.mem (appl_arg, ctx) arg_map) then
              let action = Lookup_pair_map.find (appl_arg, ctx) in
              match action with
              | Value_found ->
              | Value_not_found f ->


  ;; *)

  (*
     Adds a set of edges to the Plume graph.  This implicitly adds the vertices
     involved in those edges.  Note that this does not affect the end-of-block
     map.
  *)
  let add_edges edges_in analysis =
     let edges =
      edges_in
      |> Enum.filter
        (fun edge -> not @@ has_edge edge analysis.plume_graph)
     in
     if Enum.is_empty edges then (analysis,false) else
      (* ***
         First, update the PDS reachability analysis with the new edge
         information.
      *)
      let add_edge_for_reachability edge reachability =
        reachability
        |> Plume_pds_reachability.add_edge_function
          (Edge_functions.create_edge_function edge)
        |> Plume_pds_reachability.add_untargeted_dynamic_pop_action_function
          (Edge_functions.create_untargeted_dynamic_pop_action_function edge)
      in
      let pds_reachability' =
        Enum.clone edges
        |> Enum.fold (flip add_edge_for_reachability) analysis.pds_reachability
      in
      (* ***
         Next, add the edge to the Plume graph.
      *)
      let plume_graph' =
        Enum.clone edges
        |> Enum.fold (flip add_edge) analysis.plume_graph
      in
      (* ***
         Now, perform closure over the active node set.  This function uses a
         list of enumerations of nodes to explore.  This reduces the cost of
         managing the work queue.
      *)
      let rec find_new_active_nodes from_nodes_enums results_so_far =
        match from_nodes_enums with
        | [] -> results_so_far
        | from_nodes_enum::from_nodes_enums' ->
          if Enum.is_empty from_nodes_enum
          then find_new_active_nodes from_nodes_enums' results_so_far
          else
            let from_node = Enum.get_exn from_nodes_enum in
            if Node_set.mem from_node analysis.plume_active_nodes ||
               Node_set.mem from_node results_so_far
            then find_new_active_nodes from_nodes_enums results_so_far
            else
              let results_so_far' =
                Node_set.add from_node results_so_far
              in
              let from_here = plume_graph' |> succs from_node in
              find_new_active_nodes (from_here::from_nodes_enums) results_so_far'
      in
      let (plume_active_nodes',plume_active_non_immediate_nodes') =
        let new_active_root_nodes =
          Enum.clone edges
          |> Enum.filter_map
            (fun (Edge(node_left,node_right)) ->
               if Node_set.mem node_left analysis.plume_active_nodes
               then Some node_right
               else None)
          |> Enum.filter
            (fun node ->
               not @@ Node_set.mem node analysis.plume_active_nodes)
        in
        let new_active_nodes =
          find_new_active_nodes [new_active_root_nodes]
            Node_set.empty
        in
        let is_node_immediate node =
          let G.E.Node(acl, _) = node in
          is_annotated_clause_immediate acl
        in
        ( Node_set.union analysis.plume_active_nodes
            new_active_nodes
        , Node_set.union analysis.plume_active_non_immediate_nodes
            ( new_active_nodes |> Node_set.filter
                (not % is_node_immediate) )
        )
      in
      (
        { plume_graph = plume_graph'
        ; plume_graph_fully_closed = false
        ; pds_reachability =  pds_reachability'
        ; plume_active_nodes = plume_active_nodes'
        ; plume_active_non_immediate_nodes = plume_active_non_immediate_nodes'
        ; plume_logging_data = analysis.plume_logging_data
        }
      , true
      )
     ;;

  let create_initial_analysis
      ?plume_logging_config:(plume_logging_config_opt=None)
      e =
    (* Begin by constructing a logging structure. *)
    let logging_data_opt =
      match plume_logging_config_opt with
      | None -> None
      | Some config ->
        Some { plume_logging_config = config
             ; plume_closure_steps = 0 (* FIXME: this number never changes or gets reported! *)
             }
    in
    (* Lift the expression. *)
    let Abs_expr(cls) = lift_expr e in
    (* Put the annotated clauses together. *)
    let rx = rv cls in
    let nodes =
      List.enum cls
      |> Enum.map (fun x -> Node(Unannotated_clause x, C.empty))
      |> Enum.append (Enum.singleton (Node(Start_clause rx, C.empty)))
      |> flip Enum.append (Enum.singleton (Node(End_clause rx, C.empty)))
    in
    (* For each pair, produce a Plume edge. *)
    let rec mk_edges nodes' =
      match Enum.get nodes' with
      | None -> []
      | Some n1 ->
        match Enum.peek nodes' with
        | None -> []
        | Some n2 ->
          Edge(n1,n2) :: mk_edges nodes'
    in
    let edges = List.enum @@ mk_edges nodes in
    (* Construct an empty analysis. *)
    let pdr_log_fn_opt =
      match logging_data_opt with
      | None -> None
      | Some logging_data ->
        if logging_data.plume_logging_config.plume_pdr_logging_level
           = Log_nothing
        then None
        else Some
            (fun old_reachability new_reachability ->
               if logging_data.plume_logging_config.plume_pdr_deltas
               then
                 log_pdr_delta Log_everything logging_data_opt
                   old_reachability new_reachability
               else
                 log_pdr Log_everything logging_data_opt new_reachability)
    in
    (* The initial reachability analysis should include an edge function which
       always allows discarding the bottom-of-stack marker. *)
    let initial_reachability =
      Plume_pds_reachability.empty ~logging_function:pdr_log_fn_opt ()
      |> Plume_pds_reachability.add_edge_function
        (fun state ->
           Enum.singleton ([Pop Structure_types.Bottom_of_stack],
                           Static_terminus state)
        )
    in
    let empty_analysis =
      { plume_graph = G.empty
      ; plume_graph_fully_closed = true
      ; pds_reachability = initial_reachability
      ; plume_active_nodes =
          Node_set.singleton (Node((Start_clause rx), C.empty))
      ; plume_active_non_immediate_nodes = Node_set.empty
      ; plume_logging_data = logging_data_opt
      }
    in
    (* Put the edges into the empty analysis. *)
    let analysis = fst @@ add_edges edges empty_analysis in
    logger `trace "Created initial analysis";
    log_cfg Log_everything analysis;
    log_pdr Log_everything analysis.plume_logging_data analysis.pds_reachability;
    analysis
  ;;

  let restricted_values_of_variable x acl ctx patsp patsn analysis =
    Logger_utils.lazy_bracket_log (lazy_logger `trace)
      (fun () ->
         Printf.sprintf "Determining values of variable %s at position %s%s"
           (show_abstract_var x) (show_annotated_clause acl) @@
         if Pattern_set.is_empty patsp && Pattern_set.is_empty patsn
         then ""
         else
           Printf.sprintf " with pattern sets %s and %s"
             (Pattern_set.show patsp) (Pattern_set.show patsn)
      )
      (fun (values, _) ->
         let pp formatter values =
           pp_concat_sep_delim "{" "}" ", " pp_abs_filtered_value formatter @@
           Enum.clone values
         in
         pp_to_string pp values
      )
    @@ fun () ->
    let open Structure_types in
    let node = Node(acl, ctx) in
    let start_state = Program_point_state(node) in
    let start_actions =
      [Push Bottom_of_stack; Push (Lookup_var(x,patsp,patsn))]
    in
    let reachability = analysis.pds_reachability in
    let reachability' =
      reachability
      |> Plume_pds_reachability.add_start_state start_state start_actions
      |> Plume_pds_reachability.fully_close
    in
    let analysis' = { analysis with pds_reachability = reachability' } in
    let values =
      reachability'
      |> Plume_pds_reachability.get_reachable_states start_state start_actions
      |> Enum.filter_map
        (function
          | Program_point_state _ -> None
          | Result_state v -> Some v)
    in
    (values, analysis')
  ;;

  let values_of_variable x acl analysis =
    let (values, analysis') =
      restricted_values_of_variable x acl C.empty
        Pattern_set.empty Pattern_set.empty analysis
    in
    (Abs_filtered_value_set.of_enum values, analysis')
  ;;

  let contextual_values_of_variable x acl ctx analysis =
    let (values, analysis') =
      restricted_values_of_variable x acl ctx
        Pattern_set.empty Pattern_set.empty analysis
    in
    (Abs_filtered_value_set.of_enum values, analysis')
  ;;

  let perform_closure_steps analysis =
    begin
      match analysis.plume_logging_data with
      | None -> lazy_logger `trace (fun () -> "Performing closure step")
      | Some data -> lazy_logger `trace (fun () ->
          (Printf.sprintf "Performing closure step %d"
             (data.plume_closure_steps+1)));
    end;
    (* We need to do work on each of the active, non-immediate nodes.  This
       process includes variable lookups, which may result in additional work
       being done; as a result, each closure step might change the underlying
       graph.  We'll keep the analysis in a ref so that, whenever work is done
       which produces a new analysis, we can just update the ref. *)
    let analysis_ref = ref analysis in
    let new_edges_enum = Nondeterminism_monad.enum
        (
          let module Wiring = Graph_construct(G) in
          let open Wiring in
          let open Nondeterminism_monad in
          let%bind node =
            pick_enum @@
            Node_set.enum analysis.plume_active_non_immediate_nodes
          in
          let Node(acl, ctx) = node in
          let has_values x patsp patsn =
            let (values,analysis') =
              restricted_values_of_variable
                x acl ctx patsp patsn !analysis_ref
            in
            analysis_ref := analysis';
            not @@ Enum.is_empty values
          in
          match acl with
          | Unannotated_clause(Abs_clause(x1,Abs_appl_body(x2,x3)) as cl) ->
            lazy_logger `trace
              (fun () ->
                 Printf.sprintf "Considering application closure for clause %s"
                   (show_abstract_clause cl));
            (* Make sure that a value shows up to the argument. *)
            [%guard has_values x3 Pattern_set.empty Pattern_set.empty];
            (* Get each of the function values. *)
            let (x2_values,analysis_2) =
              restricted_values_of_variable
                x2 acl ctx Pattern_set.empty Pattern_set.empty !analysis_ref
            in
            analysis_ref := analysis_2;
            let%bind x2_value = pick_enum x2_values in
            let%orzero
              Abs_filtered_value(Abs_value_function(fn),_,_) = x2_value
            in
            (* Wire each one in. *)
            return @@ wire_fun (Node(acl, ctx)) fn x3 x1 analysis_2.plume_graph
          | Unannotated_clause(
              Abs_clause(x1,Abs_conditional_body(x2,p,f1,f2)) as cl) ->
            lazy_logger `trace
              (fun () ->
                 Printf.sprintf "Considering conditional closure for clause %s"
                   (show_abstract_clause cl));
            (* We have two functions we may wish to wire: f1 (if x2 has values
               which match the pattern) and f2 (if x2 has values which antimatch
               the pattern). *)
            [ (Pattern_set.singleton p, Pattern_set.empty, f1)
            ; (Pattern_set.empty, Pattern_set.singleton p, f2)
            ]
            |> List.enum
            |> Enum.filter_map
              (fun (patsp,patsn,f) ->
                 if has_values x2 patsp patsn then Some f else None)
            |> Enum.map (fun f -> wire_cond (Node(acl, ctx))
                            f x2 x1 (!analysis_ref).plume_graph)
            |> Nondeterminism_monad.pick_enum
          | _ ->
            raise @@ Utils.Invariant_failure
              "Unhandled clause in perform_closure_steps"
        )
                         |> Enum.concat
    in
    (* Due to the stateful effects of computing the new edges, we're going to
       want to pull on the entire enumeration before we start looking at the
       analysis. *)
    let new_edges_list = List.of_enum new_edges_enum in
    (* Now we want to add all of the new edges.  If there are any new ones, we
       need to know about it. *)
    let (analysis',any_new) =
      add_edges (List.enum new_edges_list) !analysis_ref
    in
    let plume_logging_data' =
      match analysis'.plume_logging_data with
      | None -> None
      | Some data ->
        Some { data with plume_closure_steps = data.plume_closure_steps+1 }
    in
    let result =
      { analysis' with
        plume_graph_fully_closed = not any_new;
        plume_logging_data = plume_logging_data'
      }
    in
    begin
      match result.plume_logging_data with
      | None -> logger `trace "Completed closure step"
      | Some data -> lazy_logger `trace
                       (fun () -> Printf.sprintf "Completed closure step %d"
                           (data.plume_closure_steps));
    end;
    log_cfg Log_everything result;
    result
  ;;

  let is_fully_closed analysis = analysis.plume_graph_fully_closed;;

  let rec perform_full_closure analysis =
    if is_fully_closed analysis
    then
      begin
        logger `trace "Closure complete.";
        log_pdr Log_result analysis.plume_logging_data analysis.pds_reachability;
        log_cfg Log_result analysis;
        analysis
      end
    else
      begin
        perform_full_closure @@ perform_closure_steps analysis
      end
  ;;
end;;
