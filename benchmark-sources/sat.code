# EXPECT-WELL-FORMED
# EXPECT-MAX-STACK-DELTA-SIZE 1
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {false, true}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# Reference: https://bitbucket.org/ucombinator/p4f-prototype/src/8f1c1c20ed02945d2855e25abef3b445d80a77eb/benchmarks/gcfa2/sat.scm?at=master&fileviewer=file-view-default
#
# (define (phi x1 x2 x3 x4)
#   (and (or x1 (not x2) (not x3))
#        (or (not x2) (not x3))
#        (or x4 x2)))
#
# (define (try f)
#   (or (f #t) (f #f)))
#
# (define (sat-solve-4 p)
#   (try (lambda (n1)
#          (try (lambda (n2)
#                 (try (lambda (n3)
#                        (try (lambda (n4)
#                               (p n1 n2 n3 n4))))))))))
#
# (sat-solve-4 phi) ; => #t

tru = true;
fals = false;

phi = fun phiparams -> (
  x1 = phiparams.x1;
  x2 = phiparams.x2;
  x3 = phiparams.x3;
  x4 = phiparams.x4;

  notx2 = not x2;

  notx3 = not x3;

  orx1notx2 = x1 or notx2;
  or3x1notx2notx3 = orx1notx2 or notx3;

  notx22 = not x2;

  notx32 = not x3;

  or2notx2notx3 = notx22 or notx32;

  or2x4x2 = x4 or x2;

  andor3x1notx2notx3or2notx2notx3 = or3x1notx2notx3 and or2notx2notx3;
  and3or3x1notx2notx3or2notx2notx3or2x4x2 = andor3x1notx2notx3or2notx2notx3 and or2x4x2;
);

try = fun f -> (
  ft = f tru;
  ff = f fals;

  or2ftff = ft or ff;
);

satsolve4 = fun p -> (
  fn1 = fun n1 -> (
    fn2 = fun n2 -> (
      fn3 = fun n3 -> (
        fn4 = fun n4 -> (
          pparams = {x1 = n1, x2 = n2, x3 = n3, x4 = n4};
          fn4r = p pparams;
        );
        tryfn4 = try fn4;
      );
      tryfn3 = try fn3;
    );
    tryfn2 = try fn2;
  );
  tryfn1 = try fn1;
);

r = satsolve4 phi; # => true
