# EXPECT-WELL-FORMED
# EXPECT-MAX-STACK-DELTA-SIZE 1
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# Reference: https://bitbucket.org/ucombinator/p4f-prototype/src/8f1c1c20ed02945d2855e25abef3b445d80a77eb/benchmarks/gcfa2/loop2.scm?at=master&fileviewer=file-view-default
#
# (letrec ((lp1 (lambda (i x)
#                 (if (= 0 i)
#                     x
#                     (letrec ((lp2 (lambda (j f y)
#                                     (if (= 0 j)
#                                         (lp1 (- i 1) y)
#                                         (lp2 (- j 1) f (f y))))))
#                       (lp2 10 (lambda (n) (+ n i)) x))))))
#   (lp1 10 0)) ; => 550

zero = 0;
one = 1;
ten = 10;

lp1 = fun lp1prparams -> (
  i = lp1prparams.i;
  x = lp1prparams.x;
  izero = zero == i;
  xr = izero ~ true
       ? fun izerom -> (
         izeromr = x;
       )
       : fun izeroa -> (
         lp1atlp2 = lp1;
         lp2 = fun lp2prparams -> (
           j = lp2prparams.j;
           f = lp2prparams.f;
           y = lp2prparams.y;
           jzero = zero == j;
           yr = jzero ~ true
                      ? fun yrm -> (
                        i1 = i - one;
                        lp1rparams = {i = i1, x = y};
                        yrmr = lp1atlp2 lp1rparams;
                      )
                      : fun yra -> (
                        j1 = j - one;
                        fy = f y;
                        lp2rparams = {j = j1, f = f, y = fy};
                        yrar = lp2 lp2rparams;
                      );
         );
         fn = fun n -> (
           ni = n + i;
         );
         lp2finalparams = {j = ten, f = fn, y = x};
         izeroar = lp2 lp2finalparams;
       );
);

lp1params = {i = ten, x = zero};
r = lp1 lp1params; # => 550
