# EXPECT-WELL-FORMED
# EXPECT-MAX-STACK-DELTA-SIZE 1
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {false, true}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# Reference: https://bitbucket.org/ucombinator/p4f-prototype/src/8f1c1c20ed02945d2855e25abef3b445d80a77eb/benchmarks/gcfa2/kcfa3.scm?at=master&fileviewer=file-view-default
#
# ((lambda (f1)
#    (let ((a (f1 #t)))
#      (f1 #f)))
#  (lambda (x1)
#    ((lambda (f2)
#       (let ((b (f2 #t)))
#         (f2 #f)))
#     (lambda (x2)
#       ((lambda (f3)
#          (let ((c (f3 #t)))
#            (f3 #f))) (lambda (x3) ((lambda (z) (z x1 x2 x3)) (lambda (y1 y2 y3) y1)))))))) ; => #f

tru = true;
fals = false;

ff1 = fun f1 -> (
  a = f1 tru;
  ff1r = f1 fals;
);

fx1 = fun x1 -> (
  ff2 = fun f2 -> (
    b = f2 tru;
    ff2r = f2 fals;
  );

  fx2 = fun x2 -> (
    ff3 = fun f3 -> (
      c = f3 tru;
      ff3r = f3 fals;
    );

    fx3 = fun x3 -> (
      fz = fun z -> (
        zparams = {y1 = x1, y2 = x2, y3 = x3};
        fzr = z zparams;
      );

      fy1 = fun fy1params -> (
        y1 = fy1params.y1;
        y2 = fy1params.y2;
        y3 = fy1params.y3;

        fy1r = y1;
      );

      fx3r = fz fy1;
    );

    fx2r = ff3 fx3;
  );

  fx1r = ff2 fx2;
);

r = ff1 fx1; # => false
