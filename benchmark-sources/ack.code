# EXPECT-WELL-FORMED
# EXPECT-MAX-STACK-DELTA-SIZE 1
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# Reference: https://bitbucket.org/ucombinator/p4f-prototype/src/8f1c1c20ed02945d2855e25abef3b445d80a77eb/benchmarks/larceny/ack.sch?at=master&fileviewer=file-view-default
#
# (define (ack m n)
#   (cond ((= m 0) (+ n 1))
#         ((= n 0) (ack (- m 1) 1))
#         (else (ack (- m 1) (ack m (- n 1))))))
#
# (ack 3 12)

zero = 0;
one = 1;
three = 3;
twelve = 12;

ack = fun ackparams -> (
  m = ackparams.m;
  n = ackparams.n;
  mzero = m == zero;
  ackrr = mzero ~ true
          ? fun mzerom -> (
            mzeromr = n + one;
          )
          : fun mzeroa -> (
            nzero = n == zero;
            mzeroar = nzero ~ true
                    ? fun nzerom -> (
                      m1 = m - one;
                      nzeromrparams = {m = m1, n = one};
                      nzeromr = ack nzeromrparams;
                    )
                    : fun nzeroa -> (
                      m12 = m - one;
                      n1 = n - one;
                      ackmn1params = {m = m, n = n1};
                      ackmn1 = ack ackmn1params;
                      nzeroarparams = {m = m12, n = ackmn1};
                      nzeroar = ack nzeroarparams;
                    );
          );
);

rparams = {m = three, n = twelve};
r = ack rparams; # => 32765
