# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-MAX-STACK-DELTA-SIZE 0
# EXPECT-ANALYSIS-LOOKUP-FROM-END evenzero {false, true}
# EXPECT-ANALYSIS-LOOKUP-FROM-END oddzero {false, true}
# EXPECT-ANALYSIS-LOOKUP-FROM-END eventhree {false, true}
# EXPECT-ANALYSIS-LOOKUP-FROM-END oddthree {false, true}
# EXPECT-ANALYSIS-LOOKUP-FROM-END evensix {false, true}
# EXPECT-ANALYSIS-LOOKUP-FROM-END oddsix {false, true}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# let rec even n =
#   if n = 0 then true
#   else odd (n - 1)
# and odd n =
#   if n = 0 then false
#   else even (n - 1)
# ;;
#
# even 0;; (* => true *)
# odd 0;; (* => false *)
#
# even 3;; (* => false *)
# odd 3;; (* => true *)
#
# even 6;; (* => true *)
# odd 6;; (* => false *)

zero = 0;
one = 1;
three = 3;
six = 6;

even = fun evennumber -> (
  evennumberiszero = evennumber == zero;
  evenresult = evennumberiszero ~ true ?
               fun evennumberiszeromatch -> (
                 evennumberiszeromatchreturn = true;
               ) :
               fun evennumberiszeroantimatch -> (
                 evennumberminusone = evennumber - one;
                 evennumberiszeroantimatchreturn = odd evennumberminusone;
               );
);

odd = fun oddnumber -> (
  oddnumberiszero = oddnumber == zero;
  oddresult = oddnumberiszero ~ true ?
               fun oddnumberiszeromatch -> (
                 oddnumberiszeromatchreturn = false;
               ) :
               fun oddnumberiszeroantimatch -> (
                 oddnumberminusone = oddnumber - one;
                 oddnumberiszeroantimatchreturn = even oddnumberminusone;
               );
);

evenzero = even zero; # => true
oddzero = odd zero; # => false

eventhree = even three; # => false
oddthree = odd three; # => true

evensix = even six; # => true
oddsix = odd six; # => false
