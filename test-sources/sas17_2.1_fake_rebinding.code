# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-MAX-STACK-DELTA-SIZE 0
# EXPECT-ANALYSIS-LOOKUP-FROM-END compose_same_negate_argument {true}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# From ``CFA2: Pushdown Flow Analysis for Higher-Order Languages''
# (define (compose-same f x) (f (f x)))

compose_same = fun f -> (
  compose_same_partial = fun x -> (
    compose_same_partial_partial_application = f x;
    compose_same_partial_return = f compose_same_partial_partial_application;
  );
);

identity = fun identity_argument -> (
  identity_return = identity_argument;
);

negate = fun negate_argument -> (
  negate_return = not negate_argument;
);

compose_same_identity = compose_same identity;
compose_same_negate = compose_same negate;

argument = true;

compose_same_identity_argument = compose_same_identity argument;
compose_same_negate_argument = compose_same_negate argument;
