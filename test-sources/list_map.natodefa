# EXPECT-WELL-FORMED
# EXPECT-ANALYSIS-STACK-IS 0ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END ~result {int}

let x = [1, 2, 3] in
let rec list_map f lst =
  match lst with
  | [] -> []
  | hd :: tl -> ((f hd) :: (list_map f tl))
  end
in
let inc n = n + 1 in
let res = list_map inc x in
let first_elm =
  match x with
  | hd :: tl -> hd
  end
in first_elm
