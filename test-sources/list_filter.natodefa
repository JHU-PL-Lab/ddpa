# EXPECT-EVALUATE
# EXPECT-WELL-FORMED
# EXPECT-ANALYSIS-STACK-IS 0ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END ~result {{~empty=record~55}, int}

let x = [1, 2, 3, 4, 5] in
let rec list_filter f lst =
match lst with
| [] -> []
| hd :: tl ->
  (if (f hd == true) then (hd :: list_filter f tl) else (list_filter f tl))
end
in
let greater_than_three = fun n -> (n <= 3) in
let res_list = list_filter greater_than_three x in
match res_list with
| hd :: tl -> hd
| [] -> []
end
