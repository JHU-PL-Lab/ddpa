# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-MAX-STACK-DELTA-SIZE 1
# EXPECT-ANALYSIS-LOOKUP-FROM-END compose_same_negate_applied {true}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# From ``CFA2: Pushdown Flow Analysis for Higher-Order Languages''
# (define (compose-same f x) (f (f x)))

compose_same = fun compose_same_arguments -> (
  f = compose_same_arguments.f;
  x = compose_same_arguments.x;
  compose_same_partial_application = f x;
  compose_same_return = f compose_same_partial_application;
);

identity = fun identity_argument -> (
  identity_eta = fun identity_eta_argument -> (
    identity_return_eta = identity_argument;
  );
  identity_return = identity_eta identity_argument;
);

negate = fun negate_argument -> (
  negate_eta = fun negate_eta_argument -> (
    negate_return_eta = not negate_argument;
  );
  negate_return = negate_eta negate_argument;
);

argument = true;

compose_same_identity_arguments = {f = identity, x = argument};
compose_same_negate_arguments = {f = negate, x = argument};

compose_same_identity_applied = compose_same compose_same_identity_arguments;
compose_same_negate_applied = compose_same compose_same_negate_arguments;
